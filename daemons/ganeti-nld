#!/usr/bin/python
#

# Copyright (C) 2009, Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.


"""Ganeti network lookup daemon

Ganeti-nld is a daemon that runs on NBMA Ganeti clusters, and is used to lookup
instance primary nodes, in order to route traffic to them.

NLD can run on Ganeti nodes or NBMA gateways (or endpoints), and depends on
ganeti-confd being run on the cluster master candidates and, if run outside of
Ganeti, on the cluster hmac key and master candidate list being available.

"""

# pylint: disable-msg=C0103
# C0103: Invalid name "ganeti-nld"

import os
import sys
import logging

from optparse import OptionParser

from ganeti_nbma import constants
from ganeti_nbma import networktables
from ganeti_nbma import config
from ganeti_nbma import server

from ganeti import confd
from ganeti import constants as gnt_constants
from ganeti import daemon
from ganeti import ssconf
from ganeti import utils
from ganeti import errors

# pylint: disable-msg=W0611
import ganeti.confd.client

# Injecting ourselves in the ganeti constants
NLD = "ganeti-nld"
gnt_constants.NLD = NLD
gnt_constants.DAEMONS_LOGFILES[NLD] = gnt_constants.LOG_DIR + "nl-daemon.log"

# Node list update period (seconds)
NODE_LIST_UPDATE_TIMEOUT = 30

# Master candidate update period (seconds)
MC_LIST_UPDATE_TIMEOUT = 120

# Master node IP update period (seconds)
MASTER_UPDATE_TIMEOUT = 30

# Instance map update period (seconds)
#
# For now we need a low number here, but in the future we'll rely on
# invalidation. Until we have invalidation the instance will not be
# accessible, when it changes node, for up to this number of seconds, plus the
# time to get a confd response.
INSTANCE_MAP_UPDATE_TIMEOUT = 5


class NLDConfdCallback(object):
  """NLD callback for confd queries.

  """
  def __init__(self, name, nld_config, peer_manager):
    self.dispatch_table = {
      gnt_constants.CONFD_REQ_NODE_PIP_LIST:
        self.UpdateNodeIPList,
      gnt_constants.CONFD_REQ_MC_PIP_LIST:
        self.UpdateMCIPList,
      gnt_constants.CONFD_REQ_INSTANCES_IPS_LIST:
        self.UpdateInstanceIPList,
      gnt_constants.CONFD_REQ_NODE_PIP_BY_INSTANCE_IP:
        self.UpdateInstanceNodeMapping,
      gnt_constants.CONFD_REQ_CLUSTER_MASTER:
        self.UpdateMasterNodeIP,
    }
    self.name = name
    self.nld_config = nld_config
    self.peer_manager = peer_manager
    self.peer_manager.RegisterPeerSet(name)
    self.cached_mc_list = None
    self.cached_instance_node_map = {}
    self.cached_master_ip = None
    self.cached_master_node_ip = None

  def UpdateNodeIPList(self, up):
    """Update dynamic iptables rules from the node list

    """
    logging.debug("Received node ip list reply")
    self.peer_manager.UpdatePeerSetNodes(self.name, up.server_reply.answer)

  def UpdateMCIPList(self, up):
    """Update dynamic iptables rules from the node list

    """
    logging.debug("Received mc ip list reply")
    if up.server_reply.answer == self.cached_mc_list:
      return
    self.cached_mc_list = up.server_reply.answer
    mc_list = up.server_reply.answer
    logging.debug("Updating confd peers: %s", mc_list)
    up.client.UpdatePeerList(mc_list)
    if self.nld_config.out_mc_file:
      utils.WriteFile(self.nld_config.out_mc_file,
                      data="%s\n" % "\n".join(mc_list))

  @staticmethod
  def UpdateInstanceIPList(up):
    """Update the instances list

    """
    logging.debug("Received instance ip list reply, and sending mapping query")
    link = up.orig_request.query
    iplist = up.server_reply.answer

    mapping_query = {
      gnt_constants.CONFD_REQQ_IPLIST: iplist,
      gnt_constants.CONFD_REQQ_LINK: link,
      }

    req = confd.client.ConfdClientRequest(
      type=gnt_constants.CONFD_REQ_NODE_PIP_BY_INSTANCE_IP,
      query=mapping_query,
      )
    up.client.SendRequest(req, args=link)

  def UpdateInstanceNodeMapping(self, up):
    """Update the instances mapping

    """
    logging.debug("Received instance node mapping reply")
    instances = up.orig_request.query[gnt_constants.CONFD_REQQ_IPLIST]
    link = up.orig_request.query[gnt_constants.CONFD_REQQ_LINK]
    replies = up.server_reply.answer

    for instance, reply in zip(instances, replies):
      status, node = reply
      if status != gnt_constants.CONFD_REPL_STATUS_OK:
        logging.debug("Error %s retrieving node for instance %s: %s",
                      status, instance, node)
        continue
      if not node:
        logging.debug("Empty answer retrieving node for instance %s",
                      instance)
        continue
      if link not in self.cached_instance_node_map:
        self.cached_instance_node_map[link] = {}
      if self.cached_instance_node_map[link].get(instance, None) == node:
        continue
      self.cached_instance_node_map[link][instance] = node
      tunnel = self.nld_config.tables_tunnels[link]
      networktables.UpdateNetworkEntry(instance, node,
                                       networktables.NEIGHBOUR_CONTEXT,
                                       tunnel)

  def UpdateMasterNodeIP(self, up):
    """Update the IP address of the master node

    """
    master_ip, master_node_ip = up.server_reply.answer
    logging.debug("Received master node IP reply. Master IP: %s,"
                  " master node IP: %s", master_ip, master_node_ip)

    master_route_changed = False

    if master_ip != self.cached_master_ip:
      master_route_changed = True
      if self.cached_master_ip is None:
        self.cached_master_ip = master_ip
      else:
        logging.warning("Master IP address changed (old: %s, new: %s)."
                        " This is unexpected.",
                        master_ip, self.cached_master_ip)

    if master_node_ip != self.cached_master_node_ip:
      master_route_changed = True
      self.cached_master_node_ip = master_node_ip

    if master_route_changed:
      # TODO: we are assuming here that the default neighbour interface
      # is the correct one to use, but this is only valid for single-NBMA
      # setups. Will have to replace this when we introduce support for
      # multiple NBMA networks.
      networktables.UpdateNetworkEntry(master_ip, master_node_ip,
                                       networktables.NEIGHBOUR_CONTEXT,
                                       constants.DEFAULT_NEIGHBOUR_INTERFACE)

  def __call__(self, up):
    """NLD confd callback.

    @type up: L{ConfdUpcallPayload}
    @param up: upper callback

    """
    if up.type == confd.client.UPCALL_REPLY:
      if up.server_reply.status != gnt_constants.CONFD_REPL_STATUS_OK:
        logging.warning("Received error '%s' to confd request %s",
                        up.server_reply.answer, up.orig_request)
        return

      rtype = up.orig_request.type
      try:
        dispatcher = self.dispatch_table[rtype]
      except KeyError, err: # pylint: disable-msg=W0612
        logging.warning("Unhandled confd response type: %s", rtype)
      dispatcher(up)


class NLDPeriodicUpdater(object):
  """Update network lookup tables periodically

  """
  def __init__(self, name, mainloop, nld_config, # pylint: disable-msg=R0913
               hmac_key, mc_list, peer_manager):
    """Constructor for NLDPeriodicUpdater

    @type name: string
    @param name: unique name associated to this updater
    @type mainloop: L{daemon.Mainloop}
    @param mainloop: ganeti-nld mainloop
    @type nld_config: L{lib.config.NLDConfig}
    @param nld_config: ganeti-nld configuration
    @type hmac_key: string
    @param hmac_key: hmac key to talk to the cluster
    @type mc_list: list of strings
    @param mc_list: list of master candidates (confd peers)
    @type peer_manager: L{server.PeerSetManager}
    @param peer_manager: ganeti-nld peer manager

    """
    self.mainloop = mainloop
    self.nld_config = nld_config
    my_callback = NLDConfdCallback(name, nld_config, peer_manager)
    callback = confd.client.ConfdFilterCallback(my_callback, logger=logging)
    self.confd_client = confd.client.ConfdClient(hmac_key, mc_list,
                                                 callback, logger=logging)

    self.node_timer_handle = None
    self.mc_timer_handle = None
    self.instance_timer_handle = None
    self.master_timer_handle = None
    self._EnableTimers(immediate_schedule=True)

  def _EnableTimers(self, immediate_schedule=False):
    """Schedule the update events on the main loop.

    @type immediate_schedule: boolean
    @param immediate_schedule: If set to True, all unscheduled events get
        scheduled with no delay.

    """
    timeout_update_nodes = NODE_LIST_UPDATE_TIMEOUT
    timeout_update_mcs = MC_LIST_UPDATE_TIMEOUT
    timeout_update_instances = INSTANCE_MAP_UPDATE_TIMEOUT
    timeout_update_master = MASTER_UPDATE_TIMEOUT

    if immediate_schedule:
      timeout_update_nodes = 0
      timeout_update_mcs = 0
      timeout_update_instances = 0
      timeout_update_master = 0

    if self.node_timer_handle is None:
      self.node_timer_handle = \
        self.mainloop.scheduler.enter(timeout_update_nodes,
                                      1, self.UpdateNodes, [])

    if self.mc_timer_handle is None:
      self.mc_timer_handle = \
        self.mainloop.scheduler.enter(timeout_update_mcs,
                                      1, self.UpdateMCs, [])

    if self.instance_timer_handle is None:
      self.instance_timer_handle = \
        self.mainloop.scheduler.enter(timeout_update_instances,
                                      1, self.UpdateInstances, [])

    if self.master_timer_handle is None:
      self.master_timer_handle = \
        self.mainloop.scheduler.enter(timeout_update_master,
                                      1, self.UpdateMaster, [])

  def UpdateNodes(self):
    """Periodically update the node list.

    The updated node list will be handled by the iptables module.

    """
    self.node_timer_handle = None
    self._EnableTimers()
    logging.debug("Sending node ip list request")
    req = confd.client.ConfdClientRequest(
      type=gnt_constants.CONFD_REQ_NODE_PIP_LIST)
    self.confd_client.SendRequest(req)

  def UpdateMCs(self):
    """Periodically update the MC list.

    """
    self.mc_timer_handle = None
    self._EnableTimers()
    logging.debug("Sending mc ip list request")
    req = confd.client.ConfdClientRequest(
      type=gnt_constants.CONFD_REQ_MC_PIP_LIST)
    self.confd_client.SendRequest(req)

  def UpdateInstances(self):
    """Periodically update the instance list.

    The updated instance ip list will be used to build an instance map.

    """
    self.instance_timer_handle = None
    self._EnableTimers()
    logging.debug("Sending instance ip list request")
    for link in self.nld_config.tables_tunnels:
      req = confd.client.ConfdClientRequest(
              type=gnt_constants.CONFD_REQ_INSTANCES_IPS_LIST,
              query=link)
    self.confd_client.SendRequest(req)

  def UpdateMaster(self):
    """Periodically update the master node IP.

    """
    self.master_timer_handle = None
    self._EnableTimers()
    logging.debug("Sending master node ip request")
    query = {
      gnt_constants.CONFD_REQQ_FIELDS: (
        gnt_constants.CONFD_REQFIELD_IP,
        gnt_constants.CONFD_REQFIELD_MNODE_PIP,
        )
      }
    req = confd.client.ConfdClientRequest(
      type=gnt_constants.CONFD_REQ_CLUSTER_MASTER,
      query=query
      )
    self.confd_client.SendRequest(req)


class NetworkLookupDaemon(object):
  """Main Ganeti NLD class

  """
  def CheckNld(self, options, args):
    """Initial checks whether to run exit with a failure.

    """
    if not os.path.isfile(options.hmac_file):
      print >> sys.stderr, "Need HMAC key %s to run" % options.hmac_file
      sys.exit(gnt_constants.EXIT_FAILURE)

    if not os.path.isfile(options.mc_file):
      print >> sys.stderr, "Need MC list %s to run" % options.mc_file
      sys.exit(gnt_constants.EXIT_FAILURE)

    if (constants.DEFAULT_CONF_FILE not in args and
        os.path.exists(constants.DEFAULT_CONF_FILE)):
      args.append(constants.DEFAULT_CONF_FILE)
    elif not args:
      print >> sys.stderr, "Please pass in at least a config file"
      sys.exit(gnt_constants.EXIT_FAILURE)

    try:
      # pylint: disable-msg=W0201
      # Attribute 'config' defined outside __init__
      self.config = config.NLDConfig.FromConfigFiles(args)
    except EnvironmentError, err:
      print >> sys.stderr, "Error loading config: %s" % err
      sys.exit(gnt_constants.EXIT_FAILURE)
    except errors.ConfigurationError, err:
      print >> sys.stderr, "Configuration error: %s" % err
      sys.exit(gnt_constants.EXIT_FAILURE)

    if options.update_mc_file:
      self.config.out_mc_file = options.mc_file

  def ExecNld(self, options, args): # pylint: disable-msg=W0613
    """Main confd function, executed with PID file held

    """
    mainloop = daemon.Mainloop()
    peer_set_manager = server.PeerSetManager()
    peer_set_manager.RegisterPeerSet("endpoints")
    peer_set_manager.UpdatePeerSetNodes("endpoints", self.config.endpoints)
    hmac_key = utils.ReadFile(options.hmac_file)
    mc_list = utils.ReadFile(options.mc_file).splitlines()
    #FIXME: Create a unique string per cluster, when we'll have more than one
    NLDPeriodicUpdater("global", mainloop, self.config,
                       hmac_key, mc_list, peer_set_manager)
    mainloop.Run()


def main():
  """Main function for the confd daemon.

  """
  parser = OptionParser(description="Ganeti network lookup daemon",
                        usage="%prog [-f] [-d] [-b ADDRESS] [config...]",
                        version="%%prog (ganeti-nld) %s" %
                        constants.RELEASE_VERSION)
  parser.add_option("--hmac-key", dest="hmac_file",
                    help="HMAC key file",
                    default=gnt_constants.HMAC_CLUSTER_KEY, type="string")
  ss = ssconf.SimpleStore()
  default_mclist = ss.KeyToFilename(gnt_constants.SS_MASTER_CANDIDATES_IPS)
  parser.add_option("--mc-list", dest="mc_file",
                    help="Master Candidates addresses file",
                    default=default_mclist, type="string")
  parser.add_option("--update-mc-file", dest="update_mc_file",
                    help="Periodically update the MC file",
                    default=False, action="store_true")

  dirs = [(val, gnt_constants.RUN_DIRS_MODE)
          for val in gnt_constants.SUB_RUN_DIRS]
  dirs.append((gnt_constants.LOCK_DIR, 1777))
  nld = NetworkLookupDaemon()

  daemon.GenericMain(NLD, parser, dirs, nld.CheckNld, nld.ExecNld)


if __name__ == "__main__":
  main()
