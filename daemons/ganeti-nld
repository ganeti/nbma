#!/usr/bin/python
#

# Copyright (C) 2009, Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.


"""Ganeti network lookup daemon

Ganeti-nld is a daemon that runs on NBMA Ganeti clusters, and is used to lookup
instance primary nodes, in order to route traffic to them.

NLD can run on Ganeti nodes or NBMA gateways (or endpoints), and depends on
ganeti-confd being run on the cluster master candidates and, if run outside of
Ganeti, on the cluster hmac key and master candidate list being available.

"""

# pylint: disable-msg=C0103
# C0103: Invalid name "ganeti-nld"

import os
import sys
import logging
import ip

from optparse import OptionParser

from ganeti_nbma import constants
from ganeti_nbma import config
from ganeti_nbma import server
from ganeti_nbma import nflog_dispatcher
from ganeti_nbma import nld_nld
from ganeti_nbma import nld_confd

from ganeti import constants as gnt_constants
from ganeti import daemon
from ganeti import utils
from ganeti import errors

# pylint: disable-msg=W0611
import ganeti.confd.client

# Injecting ourselves in the ganeti constants
gnt_constants.NLD = constants.NLD
gnt_constants.DAEMONS_LOGFILES[constants.NLD] = gnt_constants.LOG_DIR + "nl-daemon.log"
gnt_constants.DAEMONS_PORTS[constants.NLD] = ("udp", 1816)


class MisroutedPacketHandler(object):
  """Callback called when a packet is received via the NFLOG target.

  """
  def __init__(self, nld_server, instance_node_maps, endpoints, updaters):
    self.nld_server = nld_server
    self.instance_node_maps = instance_node_maps
    self.endpoints = endpoints
    self.updaters = updaters

  def __call__(self, i, nflog_payload):
    # Look up the source IP in the instance->node maps. If found, it means the
    # packet came from an instance in one of our clusters, which means the
    # node it's running on has stale routing information, so we have to
    # notify that node.
    ip_packet = ip.disassemble(nflog_payload.get_data())

    # FIXME: If different instances have the same IP address on separate
    # clusters this search might find the wrong one. We should first get
    # the interface the packet was received on
    # (nflog_payload.get_indev() or nflog_payload.get_prefix()) and only
    # look up nodes in the cluster associated with that interface.
    source_cluster = None
    source_link = None
    source_node = None
    for cluster, cluster_map in self.instance_node_maps.iteritems():
      for link, link_map in cluster_map.iteritems():
        source_node = link_map.get(ip_packet.src, None)
        if source_node:
          source_cluster = cluster
          source_link = link
          break

    if source_node:
      logging.debug("misrouted packet detected."
                    " [cluster: %s] [node: %s] [link: %s] [source: %s]",
                    source_cluster, source_node, source_link,
                    ip_packet.src)
      # Update the instance IP list on this node
      self.updaters[source_cluster].UpdateInstances()
      # Send NLD route invalidation request to the source node
      request = nld_nld.NLDClientRequest(
          type=constants.NLD_REQ_ROUTE_INVALIDATE,
          query=ip_packet.dst)
      self.nld_server.SendRequest(request, source_cluster, source_node)
    else:
      logging.debug("misrouted packet detected. [source: %s]",
                    ip_packet.src)
      # Update the instance IP lists on this node
      for _, updater in self.updaters.iteritems():
        updater.UpdateInstances()

    # Notify the endpoint(s)
    # TODO: this uses the "external" IPs of the endpoints.
    # Maybe we should be using their private IPs here.
    logging.debug("notifying the endpoints about a misrouted packet...")
    for endpoint in self.endpoints:
      logging.debug("notifying endpoint: %s", endpoint)
      request = nld_nld.NLDClientRequest(
          type=constants.NLD_REQ_ROUTE_INVALIDATE,
          query=ip_packet.dst)
      self.nld_server.SendRequest(request, "default", endpoint)

    return 1


class NetworkLookupDaemon(object):
  """Main Ganeti NLD class

  """
  # pylint: disable-msg=W0613
  # Unused argument 'options'
  def CheckNld(self, options, args):
    """Initial checks whether to run exit with a failure.

    """
    if (constants.DEFAULT_CONF_FILE not in args and
        os.path.exists(constants.DEFAULT_CONF_FILE)):
      args.append(constants.DEFAULT_CONF_FILE)
    elif not args:
      print >> sys.stderr, "Please specify at least one config file"
      sys.exit(gnt_constants.EXIT_FAILURE)

    try:
      # pylint: disable-msg=W0201
      # Attribute 'config' defined outside __init__
      self.config = config.NLDConfig.FromConfigFiles(args)
    except EnvironmentError, err:
      print >> sys.stderr, "Error loading config: %s" % err
      sys.exit(gnt_constants.EXIT_FAILURE)
    except errors.ConfigurationError, err:
      print >> sys.stderr, "Configuration error: %s" % err
      sys.exit(gnt_constants.EXIT_FAILURE)

    for cluster_name, cluster_options in self.config.clusters.iteritems():
      if not os.path.isfile(cluster_options["hmac_key_file"]):
        print >> sys.stderr, (
          "HMAC key file '%s' for cluster '%s' doesn't exist"
          % (cluster_options["hmac_key_file"], cluster_name))
        sys.exit(gnt_constants.EXIT_FAILURE)

      if not os.path.isfile(cluster_options["mc_list_file"]):
        print >> sys.stderr, (
          "Master candidate list file '%s' fpr cluster '%s' doesn't exist"
          % (cluster_options["mc_list_file"], cluster_name))
        sys.exit(gnt_constants.EXIT_FAILURE)

  def ExecNld(self, options, args): # pylint: disable-msg=W0613
    """Main confd function, executed with PID file held

    """
    mainloop = daemon.Mainloop()
    # One PeerSetManager instance is enough as it can handle multiple
    # peer sets
    peer_set_manager = server.PeerSetManager()
    peer_set_manager.RegisterPeerSet("endpoints")
    peer_set_manager.UpdatePeerSetNodes("endpoints", self.config.endpoints)

    # Global instance->node maps
    instance_node_maps = {}

    # Instantiate one periodic updater per cluster
    self.updaters = {}
    self.cluster_keys = {}
    for cluster_name, cluster_options in self.config.clusters.iteritems():
      hmac_key = utils.ReadFile(cluster_options["hmac_key_file"])
      self.cluster_keys[cluster_name] = hmac_key
      mc_list = utils.ReadFile(cluster_options["mc_list_file"]).splitlines()
      instance_node_maps[cluster_name] = {}
      self.updaters[cluster_name] = nld_confd.NLDPeriodicUpdater(
          cluster_name, mainloop, self.config, hmac_key, mc_list,
          peer_set_manager, instance_node_maps[cluster_name])

    # Instantiate NLD network request and response processers
    # and the async UDP server
    nld_request_processor = nld_nld.NLDRequestProcessor(self.cluster_keys,
                                                        self.updaters)
    nld_response_callback = nld_nld.NLDResponseCallback()
    nld_server = nld_nld.NLDAsyncUDPServer(options.bind_address,
                                           options.port,
                                           nld_request_processor,
                                           nld_response_callback,
                                           self.cluster_keys)

    # Instantiate the misrouted packet handler and its async dispatcher
    misrouted_packet_callback = MisroutedPacketHandler(nld_server,
                                                       instance_node_maps,
                                                       self.config.endpoints,
                                                       self.updaters)
    nflog_dispatcher.AsyncNFLog(misrouted_packet_callback,
                                log_group=self.config.nflog_queue)

    mainloop.Run()


def main():
  """Main function for the confd daemon.

  """
  parser = OptionParser(description="Ganeti network lookup daemon",
                        usage="%prog [-f] [-d] [-b ADDRESS] [config...]",
                        version="%%prog (ganeti-nld) %s" %
                        constants.RELEASE_VERSION)

  dirs = [(val, gnt_constants.RUN_DIRS_MODE)
          for val in gnt_constants.SUB_RUN_DIRS]
  dirs.append((gnt_constants.LOCK_DIR, 1777))
  nld = NetworkLookupDaemon()

  daemon.GenericMain(constants.NLD, parser, dirs, nld.CheckNld, nld.ExecNld)


if __name__ == "__main__":
  main()
